name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: dracks/mrscrooge


jobs:
  preBuild:
    runs-on: ubuntu-latest
    outputs:
        tag: ${{steps.vars.outputs.tag}}
        commit: ${{steps.vars.outputs.commit}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set output
        id: vars
        run:
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT;
            echo "commit=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT;
  build:
    needs: [ preBuild ]
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
        - platform: amd64
          runner: ubuntu-24.04
        - platform: arm64
          runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=-${{ matrix.platform }}
            prefix=


      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: dracks
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./src/docker/Dockerfile
          platforms: linux/${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ steps.meta.outputs.tags }}"
          provenance: false
          build-args: |
            TAG_NAME=${{  github.ref_name }}
            GIT_COMMIT=${{ needs.preBuild.outputs.commit }}
            VERSION=${{ needs.preBuild.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  multiarch:
    needs: [ build, preBuild ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
        - name: Log into registry ${{ env.REGISTRY }}
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: dracks
            password: ${{ secrets.DOCKER_TOKEN }}

        - name: Create and push manifest
          run: |
            docker manifest create ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }} \
            --amend ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }}-amd64 \
            --amend ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }}-arm64
            docker manifest create ${{ env.IMAGE_NAME }}:latest \
              --amend ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }}-amd64 \
              --amend ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }}-arm64
              docker manifest push ${{ env.IMAGE_NAME }}:${{ needs.preBuild.outputs.tag }}
            docker manifest push ${{ env.IMAGE_NAME }}:latest
    
