name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    # branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: dracks/mrscrooge
  PLATFORMS: linux/amd64,linux/arm64
  # PLATFORMS: linux/amd64


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
          
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          
      - name: Install node dependencies
        working-directory: ./view
        run: npm install
        
      - name: build view
        working-directory: ./view
        run: npm run build

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta-postgres
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=-postgres
            prefix=

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: dracks
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./docker/config/sqlite/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ steps.meta.outputs.tags }}"
          build-args: |
            TAG_NAME=${{  github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker postgres image
        id: build-and-push-postgres
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./docker/config/postgres/Dockerfile
          platforms: ${{ env.PLATFORMS}}
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ steps.meta-postgres.outputs.tags }},docker.io/dracks/mrscrooge:latest-postgres"
          #tags: "${{ steps.meta-postgres.outputs.tags }}"
          labels: ${{ steps.meta-postgres.outputs.labels }}


      # Sign the resulting Docker image digest except on PRs and private repos
      # The keyless signing process records signatures on the Rekor public
      # transparency log, so signing is disabled for private repos by default
      # to avoid leaking private data.  If you wish to sign things anyways,
      # then this check can be removed and --force can be added to the cosign
      # command below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' && !github.event.repository.private }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance, and records it to the
        # sigstore community Rekor transparency log.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
