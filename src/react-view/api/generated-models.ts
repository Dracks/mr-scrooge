/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/bank-transactions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiBankTransactions_list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/bank-transactions/{transactionId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Set a comment into the transaction */
        patch: operations['ApiBankTransactions_comment'];
        trace?: never;
    };
    '/bank-transactions/{transactionId}/label/{labelId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Link a label to a transaction */
        post: operations['ApiBankTransactions_linkLabel'];
        /** @description Remove a label from a transaction */
        delete: operations['ApiBankTransactions_unlinkLabel'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/graphs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiGraphs_list'];
        put?: never;
        post: operations['ApiGraphs_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/graphs/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiGraphs_update'];
        post?: never;
        delete: operations['ApiGraphs_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiGroup_list'];
        put?: never;
        post: operations['ApiGroup_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/groups/orphaned': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all groups that are not assigned to a user */
        get: operations['ApiGroup_listOrphaned'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/groups/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['ApiGroup_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/imports': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiImports_list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/imports/parsers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiImports_parserTypes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/imports/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['ApiImports_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/imports/{id}/apply/{rowId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description This will allow to create a transaction from the file-import rowId */
        post: operations['ApiImports_applyRow'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/imports/{id}/rollback/{rowId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description This will allow to delete a transaction using the file-import rowId */
        delete: operations['ApiImports_rollbackImport'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/labels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiLabels_list'];
        put?: never;
        post: operations['ApiLabels_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/labels/{labelId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiLabels_update'];
        post?: never;
        delete: operations['ApiLabels_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiRule_list'];
        put?: never;
        post: operations['ApiRule_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules/{ruleId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiRule_update'];
        post?: never;
        delete: operations['ApiRule_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules/{ruleId}/apply': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['ApiRule_apply'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules/{ruleId}/condition': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['ApiRule_addCondition'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules/{ruleId}/condition/{condId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiRule_updateCondition'];
        post?: never;
        delete: operations['ApiRule_removeCondition'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rules/{ruleId}/label/{labelId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiRule_addLabel'];
        post?: never;
        delete: operations['ApiRule_removeLabel'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Check if the user is logged in */
        get: operations['ApiSession_me'];
        put?: never;
        /** @description Login */
        post: operations['ApiSession_login'];
        /** @description Logout */
        delete: operations['ApiSession_logout'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/session/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiSession_updateMe'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['ApiUser_list'];
        put?: never;
        post: operations['ApiUser_create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['ApiUser_update'];
        post?: never;
        delete: operations['ApiUser_delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/users/{id}/group/{groupId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['ApiUser_addGroup'];
        delete: operations['ApiUser_deleteGroup'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BankTransaction: {
            id: components['schemas']['UUID'];
            groupOwnerId: components['schemas']['UUID'];
            movementName: string;
            date: components['schemas']['DateOnly'];
            dateValue?: components['schemas']['DateOnly'];
            details?: string;
            /** Format: decimal */
            value: number;
            kind: string;
            description?: string;
            labelIds: components['schemas']['UUID'][];
        };
        BaseModifyUserData: {
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
            isActive: boolean;
            isAdmin: boolean;
        };
        BaseUserData: {
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
        };
        CheckMyProfile: components['schemas']['GetMyProfile'] | components['schemas']['NotIdentified'];
        Condition: components['schemas']['ConditionDouble'] | components['schemas']['ConditionString'];
        ConditionDouble: {
            id: components['schemas']['UUID'];
            operation: components['schemas']['OperationDouble'];
            /** Format: double */
            value: number;
        };
        ConditionParamDouble: {
            operation: components['schemas']['OperationDouble'];
            /** Format: double */
            value: number;
        };
        ConditionParamString: {
            operation: components['schemas']['OperationString'];
            value: string;
        };
        ConditionParams: components['schemas']['ConditionParamDouble'] | components['schemas']['ConditionParamString'];
        ConditionString: {
            id: components['schemas']['UUID'];
            operation: components['schemas']['OperationString'];
            value: string;
        };
        /** @enum {string} */
        ConditionalRelation: 'or' | 'notAnd';
        CreateLabel: {
            name: string;
            groupOwnerId: components['schemas']['UUID'];
        };
        CreateUserParams: {
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
            isActive: boolean;
            isAdmin: boolean;
            password: string;
        };
        /** Format: date-time */
        Date: string;
        /** Format: date */
        DateOnly: string;
        Error: {
            message: string;
            code: components['schemas']['ErrorCode'];
        };
        /** @description something */
        ErrorCode: string;
        FileImport: {
            id: components['schemas']['UUID'];
            createdAt: components['schemas']['Date'];
            description: string;
            fileName: string;
            groupOwnerId: components['schemas']['UUID'];
            kind: string;
            status: components['schemas']['ImportStatus'];
            context: string | null;
            rows: components['schemas']['FileImportTransaction'][];
        };
        FileImportTransaction: {
            movementName: string;
            date: string;
            dateValue?: string;
            details?: string;
            /** Format: decimal */
            value: number;
            description?: string;
            message?: string;
            transactionId?: components['schemas']['UUID'];
        };
        FileParserType: {
            name: string;
            fileNameRegex: string;
        };
        GetMyProfile: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            user: 'identified';
            profile: components['schemas']['UserProfile'];
        };
        Graph: {
            id: components['schemas']['UUID'];
            groupOwnerId: components['schemas']['UUID'];
            name: string;
            kind: components['schemas']['GraphKind'];
            labelFilterId?: components['schemas']['UUID'];
            dateRange: components['schemas']['GraphDateRange'];
            group: components['schemas']['Group'];
            horizontalGroup?: components['schemas']['HorizontalGroup'];
        };
        /** @enum {string} */
        GraphDateRange: 'all' | 'halfYear' | 'oneMonth' | 'oneYear' | 'sixYears' | 'twoYears';
        /** @enum {string} */
        GraphGroupType: 'day' | 'labels' | 'month' | 'sign' | 'year';
        /** @enum {string} */
        GraphKind: 'bar' | 'line' | 'pie';
        GraphParam: {
            groupOwnerId: components['schemas']['UUID'];
            name: string;
            kind: components['schemas']['GraphKind'];
            labelFilterId?: components['schemas']['UUID'];
            dateRange: components['schemas']['GraphDateRange'];
            group: components['schemas']['Group'];
            horizontalGroup?: components['schemas']['HorizontalGroup'];
        };
        Group: {
            group: components['schemas']['GraphGroupType'];
            hideOthers?: boolean;
            labels?: components['schemas']['UUID'][];
        };
        HasChildren: {
            message: string;
            code: components['schemas']['ErrorCode'];
            childrenIds: components['schemas']['UUID'][];
        };
        HorizontalGroup: {
            group: components['schemas']['GraphGroupType'];
            hideOthers?: boolean;
            labels?: components['schemas']['UUID'][];
            accumulate?: boolean;
        };
        /** @enum {string} */
        ImportStatus: 'ok' | 'warning' | 'error';
        InvalidCredentials: {
            details: string;
        };
        /** @description Forbidden, usually when using a group that the user doesn't have access to */
        InvalidGroupOwnerId: {
            message: string;
            code: components['schemas']['ErrorCode'];
            validGroupOwners: components['schemas']['UUID'][];
        };
        Label: {
            id: components['schemas']['UUID'];
            name: string;
            groupOwnerId: components['schemas']['UUID'];
        };
        ListFileParsers: {
            parsers: components['schemas']['FileParserType'][];
        };
        NotFoundBankTransaction: {
            message: string;
            code: components['schemas']['ErrorCode'];
            bankTransactionSuplied: components['schemas']['UUID'];
        };
        NotFoundLabel: {
            message: string;
            code: components['schemas']['ErrorCode'];
            labelSuplied: components['schemas']['UUID'];
        };
        NotFoundLabels: {
            message: string;
            code: components['schemas']['ErrorCode'];
            validLabels: components['schemas']['UUID'][];
            invalidLabels: components['schemas']['UUID'][];
        };
        NotIdentified: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            user: 'anonymous';
        };
        /** @enum {string} */
        OperationDouble: 'greater' | 'greaterEqual' | 'less' | 'lessEqual';
        /** @enum {string} */
        OperationString: 'suffix' | 'contains' | 'prefix' | 'regularExpression';
        Rule: {
            id: components['schemas']['UUID'];
            parentRuleId?: components['schemas']['UUID'];
            groupOwnerId: components['schemas']['UUID'];
            name: string;
            relations: components['schemas']['ConditionalRelation'];
            conditions: components['schemas']['Condition'][];
            labelIds: components['schemas']['UUID'][];
        };
        RuleParam: {
            parentRuleId?: components['schemas']['UUID'];
            groupOwnerId: components['schemas']['UUID'];
            name: string;
            relations: components['schemas']['ConditionalRelation'];
        };
        SetLabelAction: {
            label: components['schemas']['UUID'];
        };
        /** Format: uuid */
        UUID: string;
        UpdateLabel: {
            name: string;
        };
        UpdateMyProfile: {
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
            defaultGroupId: components['schemas']['UUID'];
            newPassword?: string;
            password?: string;
        };
        UpdateUserData: {
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
            isActive: boolean;
            isAdmin: boolean;
            password?: string;
            defaultGroupId: components['schemas']['UUID'];
        };
        UploadData: {
            kind: string;
            /** Format: byte */
            file: string;
        };
        UserCredentials: {
            username: string;
            password: string;
        };
        UserGroup: {
            id: components['schemas']['UUID'];
            name: string;
        };
        UserProfile: {
            id: components['schemas']['UUID'];
            username: string;
            email: string;
            firstName?: string;
            lastName?: string;
            isAdmin: boolean;
            isActive: boolean;
            groups: components['schemas']['UserGroup'][];
            defaultGroupId: components['schemas']['UUID'];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ApiBankTransactions_list: {
        parameters: {
            query?: {
                groupIds?: components['schemas']['UUID'][];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['BankTransaction'][];
                        next?: string;
                    };
                };
            };
        };
    };
    ApiBankTransactions_comment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transactionId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    comment?: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BankTransaction'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotFoundBankTransaction'];
                };
            };
        };
    };
    ApiBankTransactions_linkLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transactionId: components['schemas']['UUID'];
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BankTransaction'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['NotFoundLabel']
                        | components['schemas']['NotFoundBankTransaction'];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiBankTransactions_unlinkLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                transactionId: components['schemas']['UUID'];
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BankTransaction'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['Error']
                        | components['schemas']['NotFoundBankTransaction'];
                };
            };
        };
    };
    ApiGraphs_list: {
        parameters: {
            query?: {
                graphIds?: components['schemas']['UUID'][];
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['Graph'][];
                        next?: string;
                    };
                };
            };
        };
    };
    ApiGraphs_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GraphParam'];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Graph'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotFoundLabels'];
                };
            };
        };
    };
    ApiGraphs_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['GraphParam'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Graph'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['NotFoundLabels'] | components['schemas']['Error'];
                };
            };
        };
    };
    ApiGraphs_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiGroup_list: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserGroup'][];
                };
            };
        };
    };
    ApiGroup_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UserGroup'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserGroup'];
                };
            };
        };
    };
    ApiGroup_listOrphaned: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserGroup'][];
                };
            };
        };
    };
    ApiGroup_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ApiImports_list: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['FileImport'][];
                        next?: string;
                    };
                };
            };
        };
    };
    ApiImports_parserTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListFileParsers'];
                };
            };
        };
    };
    ApiImports_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
        };
    };
    ApiImports_applyRow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
                rowId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
        };
    };
    ApiImports_rollbackImport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
                rowId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
        };
    };
    ApiLabels_list: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['Label'][];
                        next?: string;
                    };
                };
            };
        };
    };
    ApiLabels_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateLabel'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Label'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
        };
    };
    ApiLabels_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateLabel'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Label'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiLabels_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Label'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_list: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['Rule'][];
                        next?: string;
                    };
                };
            };
        };
    };
    ApiRule_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['RuleParam'];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['RuleParam'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Unprocessable entity, assigning as parent a direct or indirect child */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Client error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['HasChildren'];
                };
            };
        };
    };
    ApiRule_apply: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Date'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Forbidden, usually when using a group that the user doesn't have access to */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidGroupOwnerId'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'] | components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_addCondition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    condition: components['schemas']['ConditionParams'];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_updateCondition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
                condId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    condition: components['schemas']['ConditionParams'];
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_removeCondition: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
                condId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_addLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiRule_removeLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ruleId: components['schemas']['UUID'];
                labelId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Rule'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiSession_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CheckMyProfile'];
                };
            };
            /** @description An unexpected error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiSession_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UserCredentials'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InvalidCredentials'];
                };
            };
        };
    };
    ApiSession_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
        };
    };
    ApiSession_updateMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateMyProfile'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_list: {
        parameters: {
            query?: {
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        results: components['schemas']['UserProfile'][];
                        next?: string;
                    };
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['CreateUserParams'];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['UpdateUserData'];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Bad request, usually when providing an invalid string as UUID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': boolean;
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_addGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
                groupId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
    ApiUser_deleteGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['UUID'];
                groupId: components['schemas']['UUID'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UserProfile'];
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Error'];
                };
            };
        };
    };
}
