# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Group {
  group: GraphGroup!
  hideOthers: Boolean
  labels: [Int!]
}

enum GraphGroup {
  Day
  Labels
  Month
  Sign
  Year
}

type HorizontalGroup {
  group: GraphGroup!
  hideOthers: Boolean
  labels: [Int!]
  accumulate: Boolean
}

type Graph {
  id: Int!
  groupOwnerId: Int!
  name: String!
  kind: GraphKind!
  labelFilter: Float
  dateRange: GraphDateRange!
  group: Group!
  horizontalGroup: HorizontalGroup
}

enum GraphKind {
  Bar
  Line
  Pie
}

enum GraphDateRange {
  all
  halfYear
  oneMonth
  oneYear
  sixYears
  twoYears
}

type Label {
  id: Float!
  groupOwnerId: Float!
  name: String!
}

type BankTransaction {
  id: Int!
  groupOwnerId: Int!
  movementName: String!
  date: DateOnly!
  dateValue: DateOnly
  details: String
  value: Float!
  kind: String!
  description: String
  labelIds: [Int!]!
}

"""Mongo object id scalar type"""
scalar DateOnly

type GetBankTransactionsResponse {
  results: [BankTransaction!]!
  next: String
}

type ImportKind {
  name: String!
  regex: String!
}

type Query {
  """Checks if a user is logged in and returns his profile"""
  me: MyProfileResponse!
  bankTransaction(cursor: String, limit: Int): GetBankTransactionsResponse!
  labels: [Label!]!
  graphs(graphsIds: [Int!]): [Graph!]!
  importKinds: [ImportKind!]!
}

union MyProfileResponse = MyProfile | NotIdentified

type MyProfile {
  email: String!
  firstName: String!
  lastName: String!
  username: String!
  defaultGroupId: Int!
}

type NotIdentified {
  identified: Boolean!
}

type Mutation {
  login(credentials: Credentials!): LoginResponse!
  logout: Boolean!
  newGraph(graph: NewGraph!): NewGraphResponse!
  updateGraph(graph: UpdatedGraph!): UpdateGraphResponse!
}

union LoginResponse = MyProfile | InvalidCredentials

type InvalidCredentials {
  invalidUserOrPassword: String!
}

input Credentials {
  username: String!
  password: String!
}

union NewGraphResponse = Graph | WrongOwnerId | InvalidLabel

type WrongOwnerId {
  validOwners: [Int!]!
}

type InvalidLabel {
  invalidLabels: [Int!]!
}

input NewGraph {
  groupOwnerId: Int!
  name: String!
  kind: GraphKind!
  labelFilter: Float
  dateRange: GraphDateRange!
  group: MutateGroup!
  horizontalGroup: MutateHorizontalGroup
}

input MutateGroup {
  group: GraphGroup!
  hideOthers: Boolean
  labels: [Int!]
}

input MutateHorizontalGroup {
  group: GraphGroup!
  hideOthers: Boolean
  labels: [Int!]
  accumulate: Boolean
}

union UpdateGraphResponse = Graph | WrongOwnerId | InvalidLabel | InvalidGraph

type InvalidGraph {
  availableGraphsId: [Int!]!
}

input UpdatedGraph {
  id: Int!
  groupOwnerId: Int!
  name: String!
  kind: GraphKind!
  labelFilter: Float
  dateRange: GraphDateRange!
  group: MutateGroup!
  horizontalGroup: MutateHorizontalGroup
}