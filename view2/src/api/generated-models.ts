/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/graph/": {
    /** It's a custom api to parse all the information of the graph to the database. */
    get: operations["graph_list"];
    /** It's a custom api to parse all the information of the graph to the database. */
    post: operations["graph_create"];
    parameters: {};
  };
  "/graph/{id}/": {
    /** It's a custom api to parse all the information of the graph to the database. */
    get: operations["graph_read"];
    /** It's a custom api to parse all the information of the graph to the database. */
    put: operations["graph_update"];
    /** It's a custom api to parse all the information of the graph to the database. */
    delete: operations["graph_delete"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/import/upload/": {
    post: operations["import_upload"];
    parameters: {};
  };
  "/me/": {
    /**
     * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
     * @todo Limit and control the modifications, (change e-mail or password should require the old password
     */
    get: operations["me_list"];
    /**
     * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
     * @todo Limit and control the modifications, (change e-mail or password should require the old password
     */
    put: operations["me_update"];
    /**
     * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
     * @todo Limit and control the modifications, (change e-mail or password should require the old password
     */
    patch: operations["me_partial_update"];
    parameters: {};
  };
  "/raw-data/": {
    get: operations["raw-data_list"];
    post: operations["raw-data_create"];
    parameters: {};
  };
  "/raw-data/{id}/": {
    get: operations["raw-data_read"];
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
  };
  "/raw-data/{id}/description/": {
    post: operations["raw-data_description_create"];
    delete: operations["raw-data_description_delete"];
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
  };
  "/raw-data/{id}/link/": {
    post: operations["raw-data_link_create"];
    delete: operations["raw-data_link_delete"];
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
  };
  "/session/": {
    /** It's a custom api to identify a user, and set the session via cookie */
    get: operations["session_list"];
    /** It's a custom api to identify a user, and set the session via cookie */
    post: operations["session_create"];
    parameters: {};
  };
  "/session/logout/": {
    /** It's a custom api to identify a user, and set the session via cookie */
    delete: operations["session_logout"];
    parameters: {};
  };
  "/status-row/": {
    get: operations["status-row_list"];
    parameters: {};
  };
  "/status-row/{id}/": {
    get: operations["status-row_read"];
    parameters: {
      path: {
        /** A unique integer value identifying this status report row. */
        id: number;
      };
    };
  };
  "/status-row/{id}/generate/": {
    post: operations["status-row_generate"];
    parameters: {
      path: {
        /** A unique integer value identifying this status report row. */
        id: number;
      };
    };
  };
  "/status/": {
    get: operations["status_list"];
    parameters: {};
  };
  "/status/file_regex/": {
    get: operations["status_file_regex"];
    parameters: {};
  };
  "/status/kinds/": {
    get: operations["status_kinds"];
    parameters: {};
  };
  "/status/{id}/": {
    get: operations["status_read"];
    delete: operations["status_delete"];
    parameters: {
      path: {
        /** A unique integer value identifying this status report. */
        id: number;
      };
    };
  };
  "/tag-filter/": {
    get: operations["tag-filter_list"];
    post: operations["tag-filter_create"];
    parameters: {};
  };
  "/tag-filter/types/": {
    get: operations["tag-filter_types"];
    parameters: {};
  };
  "/tag-filter/{id}/": {
    get: operations["tag-filter_read"];
    put: operations["tag-filter_update"];
    delete: operations["tag-filter_delete"];
    patch: operations["tag-filter_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this filter. */
        id: number;
      };
    };
  };
  "/tag/": {
    get: operations["tag_list"];
    post: operations["tag_create"];
    parameters: {};
  };
  "/tag/{id}/": {
    get: operations["tag_read"];
    put: operations["tag_update"];
    delete: operations["tag_delete"];
    patch: operations["tag_partial_update"];
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
    };
  };
  "/tag/{id}/apply_filters/": {
    post: operations["tag_apply_filters"];
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
    };
  };
}

export interface definitions {
  RawData: {
    kind: string;
    id?: number;
    movement_name: string;
    date: string;
    date_value?: string;
    details?: string;
    description?: string;
    value: number;
    tags?: string;
  };
  StatusReportRow: {
    id?: number;
    movement_name: string;
    date: string;
    date_value?: string;
    details?: string;
    value: number;
    message: string;
    raw_data?: number;
  };
  StatusReport: {
    kind: string;
    id?: number;
    date?: string;
    file_name: string;
    status: "o" | "w" | "e";
    description: string;
    rows: number[];
  };
  Filter: {
    id?: number;
    tag: number;
    type_conditional: "c" | "p" | "s" | "r" | "g" | "G" | "L" | "l";
    conditional: string;
  };
  Tag: {
    id?: number;
    parent?: number;
    children?: number[];
    name: string;
    filters?: number[];
    negate_conditional?: boolean;
  };
}

export interface operations {
  /** It's a custom api to parse all the information of the graph to the database. */
  graph_list: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /** It's a custom api to parse all the information of the graph to the database. */
  graph_create: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  /** It's a custom api to parse all the information of the graph to the database. */
  graph_read: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  /** It's a custom api to parse all the information of the graph to the database. */
  graph_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: unknown;
    };
  };
  /** It's a custom api to parse all the information of the graph to the database. */
  graph_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      204: never;
    };
  };
  import_upload: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  /**
   * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
   * @todo Limit and control the modifications, (change e-mail or password should require the old password
   */
  me_list: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /**
   * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
   * @todo Limit and control the modifications, (change e-mail or password should require the old password
   */
  me_update: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /**
   * Manage my profile, it requires less permissions to manage that User, but the modifications should be limited
   * @todo Limit and control the modifications, (change e-mail or password should require the old password
   */
  me_partial_update: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  "raw-data_list": {
    parameters: {};
    responses: {
      200: {
        schema: definitions["RawData"][];
      };
    };
  };
  "raw-data_create": {
    parameters: {
      body: {
        data: definitions["RawData"];
      };
    };
    responses: {
      201: {
        schema: definitions["RawData"];
      };
    };
  };
  "raw-data_read": {
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["RawData"];
      };
    };
  };
  "raw-data_description_create": {
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
      body: {
        data: definitions["RawData"];
      };
    };
    responses: {
      201: {
        schema: definitions["RawData"];
      };
    };
  };
  "raw-data_description_delete": {
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  "raw-data_link_create": {
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
      body: {
        data: definitions["RawData"];
      };
    };
    responses: {
      201: {
        schema: definitions["RawData"];
      };
    };
  };
  "raw-data_link_delete": {
    parameters: {
      path: {
        /** A unique integer value identifying this raw data source. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  /** It's a custom api to identify a user, and set the session via cookie */
  session_list: {
    parameters: {};
    responses: {
      200: unknown;
    };
  };
  /** It's a custom api to identify a user, and set the session via cookie */
  session_create: {
    parameters: {};
    responses: {
      201: unknown;
    };
  };
  /** It's a custom api to identify a user, and set the session via cookie */
  session_logout: {
    parameters: {};
    responses: {
      204: never;
    };
  };
  "status-row_list": {
    parameters: {};
    responses: {
      200: {
        schema: definitions["StatusReportRow"][];
      };
    };
  };
  "status-row_read": {
    parameters: {
      path: {
        /** A unique integer value identifying this status report row. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["StatusReportRow"];
      };
    };
  };
  "status-row_generate": {
    parameters: {
      path: {
        /** A unique integer value identifying this status report row. */
        id: number;
      };
      body: {
        data: definitions["StatusReportRow"];
      };
    };
    responses: {
      201: {
        schema: definitions["StatusReportRow"];
      };
    };
  };
  status_list: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["StatusReport"][];
      };
    };
  };
  status_file_regex: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["StatusReport"][];
      };
    };
  };
  status_kinds: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["StatusReport"][];
      };
    };
  };
  status_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this status report. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["StatusReport"];
      };
    };
  };
  status_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this status report. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  "tag-filter_list": {
    parameters: {
      query: {
        tag?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Filter"][];
      };
    };
  };
  "tag-filter_create": {
    parameters: {
      body: {
        data: definitions["Filter"];
      };
    };
    responses: {
      201: {
        schema: definitions["Filter"];
      };
    };
  };
  "tag-filter_types": {
    parameters: {
      query: {
        tag?: string;
      };
    };
    responses: {
      200: {
        schema: definitions["Filter"][];
      };
    };
  };
  "tag-filter_read": {
    parameters: {
      path: {
        /** A unique integer value identifying this filter. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Filter"];
      };
    };
  };
  "tag-filter_update": {
    parameters: {
      path: {
        /** A unique integer value identifying this filter. */
        id: number;
      };
      body: {
        data: definitions["Filter"];
      };
    };
    responses: {
      200: {
        schema: definitions["Filter"];
      };
    };
  };
  "tag-filter_delete": {
    parameters: {
      path: {
        /** A unique integer value identifying this filter. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  "tag-filter_partial_update": {
    parameters: {
      path: {
        /** A unique integer value identifying this filter. */
        id: number;
      };
      body: {
        data: definitions["Filter"];
      };
    };
    responses: {
      200: {
        schema: definitions["Filter"];
      };
    };
  };
  tag_list: {
    parameters: {};
    responses: {
      200: {
        schema: definitions["Tag"][];
      };
    };
  };
  tag_create: {
    parameters: {
      body: {
        data: definitions["Tag"];
      };
    };
    responses: {
      201: {
        schema: definitions["Tag"];
      };
    };
  };
  tag_read: {
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
    };
    responses: {
      200: {
        schema: definitions["Tag"];
      };
    };
  };
  tag_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
      body: {
        data: definitions["Tag"];
      };
    };
    responses: {
      200: {
        schema: definitions["Tag"];
      };
    };
  };
  tag_delete: {
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
    };
    responses: {
      204: never;
    };
  };
  tag_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
      body: {
        data: definitions["Tag"];
      };
    };
    responses: {
      200: {
        schema: definitions["Tag"];
      };
    };
  };
  tag_apply_filters: {
    parameters: {
      path: {
        /** A unique integer value identifying this tag. */
        id: number;
      };
      body: {
        data: definitions["Tag"];
      };
    };
    responses: {
      201: {
        schema: definitions["Tag"];
      };
    };
  };
}

export interface external {}
